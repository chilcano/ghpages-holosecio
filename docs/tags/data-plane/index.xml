<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data plane on Holistic Security</title>
    <link>https://chilcano.github.io/ghpages-holosecio/tags/data-plane/</link>
    <description>Recent content in data plane on Holistic Security</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You</copyright>
    <lastBuildDate>Wed, 29 Jan 2020 10:00:00 +0000</lastBuildDate><atom:link href="https://chilcano.github.io/ghpages-holosecio/tags/data-plane/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building your own affordable K8s to host a Service Mesh - Part 3: Certificate Manager</title>
      <link>https://chilcano.github.io/ghpages-holosecio/2020/01/29/building-your-own-affordable-cloud-k8s-to-host-a-service-mesh-part3-certificate-manager/</link>
      <pubDate>Wed, 29 Jan 2020 10:00:00 +0000</pubDate>
      
      <guid>https://chilcano.github.io/ghpages-holosecio/2020/01/29/building-your-own-affordable-cloud-k8s-to-host-a-service-mesh-part3-certificate-manager/</guid>
      <description>&lt;p&gt;In this blog post I&amp;rsquo;ll explain how to get a X.509 TLS Certificate from &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;} automatically during the Terraform provision time, in this way we can now invoke the services additionally on port 443 (HTTPS/TLS).&lt;br&gt;
During the Terraform execution, immediately after Kubernetes Cluster creation, the &lt;a href=&#34;https://github.com/jetstack/cert-manager&#34;&gt;JetStack Cert-Manager&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;} is deployed in a Pod, it is who will request to &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;} service a X.509 TLS Certificate, once completed, the &lt;a href=&#34;https://github.com/jetstack/cert-manager&#34;&gt;JetStack Cert-Manager&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;} will inject the X.509 Certificate as a Kubernetes Secret into NGINX Ingress Controller to enbale TLS.&lt;/p&gt;
&lt;p&gt;At this point you must have created a Kubernetes Cluster with ExternalDNS and NGINX as Ingress Controller. If you don&amp;rsquo;t know how to achieve that, I recommend to follow these posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://holisticsecurity.io/2020/01/16/building-your-own-affordable-cloud-k8s-to-host-a-service-mesh-data-plane&#34;&gt;Part 1 - Building your own affordable K8s to host a Service Mesh&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://holisticsecurity.io/2020/01/22/building-your-own-affordable-cloud-k8s-to-host-a-service-mesh-part2-external-dns-ingress&#34;&gt;Part 2 - Building your own affordable K8s - ExternalDNS and NGINX as Ingress&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://chilcano.github.io/ghpages-holosecio/assets/img/20200129-affordablek8s-aws-01-arch-ingress-dns-tls-cert-manager.png&#34;&gt;&lt;img src=&#34;https://chilcano.github.io/ghpages-holosecio/assets/img/20200129-affordablek8s-aws-01-arch-ingress-dns-tls-cert-manager.png&#34; alt=&#34;K8s Cluster created using AWS Spot Instances - Cert-Manager and Let&amp;rsquo;s Encrypt&#34; title=&#34;K8s Cluster created using AWS Spot Instances - Cert-Manager and Let&#39;s Encrypt&#34;&gt;&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building your own affordable K8s to host a Service Mesh - Part 2: External DNS and Ingress</title>
      <link>https://chilcano.github.io/ghpages-holosecio/2020/01/22/building-your-own-affordable-cloud-k8s-to-host-a-service-mesh-part2-external-dns-ingress/</link>
      <pubDate>Wed, 22 Jan 2020 10:00:00 +0000</pubDate>
      
      <guid>https://chilcano.github.io/ghpages-holosecio/2020/01/22/building-your-own-affordable-cloud-k8s-to-host-a-service-mesh-part2-external-dns-ingress/</guid>
      <description>&lt;p&gt;In order to get an affordable Kubernetes, every part we&amp;rsquo;re going to use should be affordable too, and ones of the expensive and tricky things are the &lt;a href=&#34;https://aws.amazon.com/elasticloadbalancing&#34;&gt;AWS Elastic Load Balancing (ELB)&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;} and the &lt;a href=&#34;https://aws.amazon.com/route53&#34;&gt;AWS Route 53 (DNS)&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}. Fortunately, Kubernetes SIGs are working to address this gap with the &lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns&#34;&gt;Kubernetes ExternalDNS&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But what is the problem?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apart of it is expensive, the problem is every time I deploy a &lt;code&gt;Service&lt;/code&gt; in Kubernetes I have to update and add a new DNS entry in the Cloud Provider&amp;rsquo;s DNS manually. Yes, of course, the process can be automated, but the idea is doing it during the provisioning time. In other words, every developer can publish theirs services adding the DNS name as annotation for that services can be called over Internet.
Yes, &lt;a href=&#34;https://github.com/kubernetes/dns&#34;&gt;Kubernetes brings by default a DNS&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;} but this is an internal one and it is only to work resolving DNS names over the Kubernetes Network, not for internet facing services.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Kubernetes ExternalDNS will run a program in our affordable K8s which it will synchronize exposed Kubernetes Services and Ingresses with the Cloud Provider&amp;rsquo;s DNS Service, in this case with AWS Route 53. Below you can view a high level diagram and current status of my &lt;a href=&#34;http://holisticsecurity.io/2020/01/16/building-your-own-affordable-cloud-k8s-to-host-a-service-mesh-data-plane&#34;&gt;Affordable Kubernetes Data Plane, I recommend look at first post about it&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chilcano.github.io/ghpages-holosecio/assets/img/20200122-service-mesh-01-affordablek8s-aws-arch.png&#34;&gt;&lt;img src=&#34;https://chilcano.github.io/ghpages-holosecio/assets/img/20200122-service-mesh-01-affordablek8s-aws-arch.png&#34; alt=&#34;Service Mesh hosted using AWS Spot Instances&#34; title=&#34;Service Mesh using AWS Spot Instances&#34;&gt;&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building your own affordable K8s to host a Service Mesh - Part 1</title>
      <link>https://chilcano.github.io/ghpages-holosecio/2020/01/16/building-your-own-affordable-cloud-k8s-to-host-a-service-mesh-data-plane/</link>
      <pubDate>Thu, 16 Jan 2020 10:00:00 +0000</pubDate>
      
      <guid>https://chilcano.github.io/ghpages-holosecio/2020/01/16/building-your-own-affordable-cloud-k8s-to-host-a-service-mesh-data-plane/</guid>
      <description>&lt;p&gt;I want to build a Container-based Cloud to deploy any kind of workload (RESTful API, Microservices, Event-Driven, Functions, etc.) but it should be affordable, ready to use, reliable, secure and productionable. This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Productionable: should be fully functional and ready to be used as a production environment.&lt;/li&gt;
&lt;li&gt;Reliable and Secure: able to improve the security level by implementing more security controls, at least fully isolated secure private networking.&lt;/li&gt;
&lt;li&gt;Affordable: cheaper.&lt;/li&gt;
&lt;li&gt;Ready to use: able to be automated (DevOps and IaC) with a mature management API.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below a high level architecture of Container-based Cloud I want to get. I will focus on the Service Mesh Data Plane.&lt;br&gt;
&lt;a href=&#34;https://chilcano.github.io/ghpages-holosecio/assets/img/20200116-service-mesh-01-reference-arch-2.png&#34;&gt;&lt;img src=&#34;https://chilcano.github.io/ghpages-holosecio/assets/img/20200116-service-mesh-01-reference-arch-2.png&#34; alt=&#34;&#34; title=&#34;Service Mesh hosted in a Container-based Cloud&#34;&gt;&lt;/a&gt;{:target=&amp;quot;_blank&amp;quot;}&lt;/p&gt;
&lt;p&gt;These requeriments restric some options, all of them using any Public Cloud Provider, but considering the &lt;a href=&#34;https://aws.amazon.com/ec2/spot&#34;&gt;AWS Spot Instances&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/preemptible-vms&#34;&gt;Google Cloud Preemptible VM Instances&lt;/a&gt;. Unfortunately Microsoft Azure only provides Low-Priority VMs to be used from Azure Batch Service. But if you are new user, you could apply for using the Free Tier in all of 3 Cloud Providers.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
